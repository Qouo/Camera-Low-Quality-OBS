#include <obs-module.h>
#include <graphics/graphics.h>

OBS_DECLARE_MODULE()
OBS_MODULE_USE_DEFAULT_LOCALE("lowres_filter", "en-US")

struct lowres_filter_data {
    obs_source_t *context;
    gs_effect_t *effect;
    int downscale_width = 256;
    int downscale_height = 144;
};

static const char *lowres_filter_get_name(void *unused)
{
    UNUSED_PARAMETER(unused);
    return "Low-Res 144p Filter";
}

static void *lowres_filter_create(obs_data_t *settings, obs_source_t *source)
{
    struct lowres_filter_data *filter = (lowres_filter_data *)bzalloc(sizeof(*filter));
    filter->context = source;
    return filter;
}

static void lowres_filter_render(void *data, gs_effect_t *effect)
{
    struct lowres_filter_data *filter = (lowres_filter_data *)data;

    obs_source_t *target = obs_filter_get_target(filter->context);
    if (!target) return;

    // Render target  144p
    gs_texrender_t *tex = gs_texrender_create(GS_RGBA, GS_ZS_NONE);
    gs_texrender_begin(tex, filter->downscale_width, filter->downscale_height);
    obs_source_video_render(target);
    gs_texrender_end(tex);

    // Stretch  to 1080p
    gs_texture_t *tex_out = gs_texrender_get_texture(tex);
    if (tex_out) {
        gs_draw_sprite(tex_out, 0, 1920, 1080); // Output full size
    }

    gs_texrender_destroy(tex);
}

static struct obs_source_info lowres_filter = {
    .id = "lowres_filter",
    .type = OBS_SOURCE_TYPE_FILTER,
    .output_flags = OBS_SOURCE_VIDEO,
    .get_name = lowres_filter_get_name,
    .create = lowres_filter_create,
    .video_render = lowres_filter_render,
};

bool obs_module_load(void)
{
    obs_register_source(&lowres_filter);
    return true;
}
